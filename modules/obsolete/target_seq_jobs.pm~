package target_seq_jobs;

require Exporter;
use vars qw(@ISA @EXPORT $VERSION);
use Bio::AlignIO;
use Bio::AlignIO;
use File::Copy;
our @ISA = qw(Exporter);
our @EXPORT = qw(get_templates detect_TM run_topcons make_pir);
$VERSION=1.0;

sub get_templates{
my ($receptor)=@_;
my (@templ_name,@templ_ev,@seq_str,@seq_end,@templ_str,@templ_end);
my @res=`blastp -task blastp -query $$receptor -db pdbaa -out test.out -outfmt '6 sacc evalue qstart qend sstart send'`;
$n=0;
foreach my $linia(@res){
 if($linia[1] <= 1e-02){  
 	$n++;
 	$templ_name[$n]=$linia[0];
 	$templ_ev[$n]=$linia[1];
 	$seq_str[$n]=$linia[2];
 	$seq_end[$n]=$linia[3];
 	$templ_str[$n]=$linia[4];
 	$templ_end[$n]=$linia[5];
 }
}
if ($n > 0){
 return (\@templ_name,\@templ_ev,\@seq_str,\@seq_end,\@templ_str,\@templ_end);
}
}

sub select_template{
my ($templ_name,$templ_ev,$seq_str,$seq_end,$templ_str,$templ_end)=@_;
print GOUT "select template\n";
}

sub build_nonh{
my ($tmsegs, $tmsege)=@_;
print GOUT "build nonhomologous structure\n";
}

sub detect_TM{
open(TOPC, "<$topcons_out") or die "Can’t open output file: $! $topcons_out"; #open top cons output
my @file=<OPCJE>;
close (OPCJE);
chomp @file;

my $n=1;
my @topol=();
10 for my $i (0..$#file) {
  if ($file[$i]=~/^"TOPCONS predicted"/){;
	for my $j ($i+1..$#file) {
	  last 10 if $file[$j]=~/^\s/;
	  my @linia=split(//,$file[$j]);
	  push(@topol,$linia);  
	}
  }
}

$tm=0;
$in=0;
$ex=0;
if ($topol[0] eq "M"){
  $tm++;
  $tmsegs[$tm]=1;
}
if ($topol[0] eq "i"){
  $in++;
  $intsegs[$in]=1;
}
if ($topol[0] eq "o"){
  $ex++;
  $extsegs[$ex]=1;
}

for $aa (1..$#topol){
  if ($topol[$aa] eq "M" and $topol[$aa-1] eq "i"){
	$tm++;
	$tmsegs[$tm]=$aa; 
	$intsege[$in]=$aa;
  }
  if ($topol[$aa] eq "M" and $topol[$aa-1] eq "o"){ 
	$tm++;
	$tmsegs[$tm]=$aa; 
	$extseqe[$ex]=$aa;
  }
  if ($topol[$aa] eq "i" and $topol[$aa-1] eq "M"){ 
  $tmsege[$tm]=$aa; 
  $in++;
  $intsegs[$in]=$aa;
  }
  if ($topol[$aa] eq "o" and $topol[$aa-1] eq "M"){ 
  $tmsege[$tm]=$aa; 
  $ex++;
  $extsegs[$ex]=$aa;
  }
}

return (\@tmsegs, \@tmsege, \@intsegs, \@intsege, \@extsegs, \@extsege);
}

sub run_topcons{
my ($receptor,$exe_dir)=@_;
my $wyjscie="topcons_works";
mkdir($wyjscie, 0755) if (! -d "$wyjscie");
chdir "$wyjscie" or die "Can't enter $wyjscie: $!\n";
my $target=substr($$receptor,0,index($$receptor,"."));
$protnamef="protein_list";
open(PRNF, ">$protnamef") or die "Can’t open output file: $! protein_list";
print PRNF "$target\n";
close(PRNF)

#spoctopus
my $spoctopusdir="spoctopus";
my $pssm_prf_dir="pssm_prf";
my $raw_prf_dir="raw_prf"; 
my $modhmm=$$exe_dir."/spoctopus/modhmmblast";
mkdir($spoctopusdir, 0755) if (! -d "$spoctopusdir");
mkdir($pssm_prf_dir, 0755) if (! -d "$pssm_prf_dir");
mkdir($raw_prf_dir, 0755) if (! -d "$raw_prf_dir");
`blastp -task blastp -outfmt 6 -evalue 1.e-5 -query $$receptor -db pdbaa -num_alignments 250 -out $raw_prf_dir/$target.".msa"`;
#chdir "$raw_prf_dir" or die "Can't enter $raw_prf_dir: $!\n";
#run msa2prf.sh: 
`perl $modhmm/msa62mod.pl $protnamef 0 $raw_prf_dir $raw_prf_dir .`;
`perl $modhmm/mod2modquery.pl $protnamef $raw_prf_dir $raw_prf_dir`;
`perl $modhmm/mod_upper_caser.pl $protnamef $raw_prf_dir`;
`perl $modhmm/mod2prfmod_nolabelfile.pl $protnamef . $raw_prf_dir $raw_prf_dir`;
#chdir "../";
`blastpgp -j 2 -m 6 -F F -e 1.e-5 -i $$receptor -d pdbaa -C $pssm_prf_dir/$target.".chk" >psiblast.out`;
#`psiblast -num_iterations 2 -outfmt 6 -evalue 1.e-5 -query $$receptor -db pdbaa -out_ascii_pssm $pssm_prf_dir/$target.".chk" -out psiblast.out`;
`cp $$receptor $pssm_prf_dir/$target.".chd"`;
chdir "$pssm_prf_dir" or die "Can't enter $pssm_prf_dir: $!\n";
`ls -1 *.chk >DATABASE.pn`;
`ls -1 *.chd >DATABASE.sn`;
`makemat -P DATABASE`;
`perl mtx2prf.pl $target.".mtx" .`;
chdir "../";
`bash SPOCTOPUS.sh $protnamef $pssm_prf_dir $raw_prf_dir $spoctopusdir`;

#prodiv
my $prodivdir="prodiv";
my $prodiv_feed="prodiv_in";
mkdir($prodivdir, 0755) if (! -d "$prodivdir");
mkdir($prodiv_feed, 0755) if (! -d "$prodiv_feed");
`blastp -task blastp -evalue 1.e-5 -query $$receptor -db swissprot -out $prodiv_feed/$$receptor.".blast"`;
chdir "$prodiv_feed" or die "Can't enter $prodiv_feed: $!\n";
my $blast_report = new Bio::SearchIO ('-format' => 'blast', '-file'   => $$receptor.".blast");
my $result = $blast_report->next_result;
my $out = Bio::AlignIO->newFh(-format => 'selex' );
while( my $hit = $result->next_hit()) {
	while( my $hsp = $hit->next_hsp()) { 
	    my $aln = $hsp->get_aln();
	    print $out $aln;
	}
}
chdir "../";
#ewentualnie najpierw zapisac faste 
#my $in  = Bio::AlignIO->newFh(-file => $inputfilename ,'-format' => 'fasta');
#my $out = Bio::AlignIO->newFh('-format' => 'selex');
#print $out $_ while <$in>;
`selex2mod.pl $protnamef $prodiv_feed $prodivdir`;
`all_tmhmm_runner.pl prodiv $prodiv_feed $prodivdir`;

#scampi
my $scampidir="prodiv";
mkdir($scampidir, 0755) if (! -d "$scampidir");
copy($$receptor,$scampidir/$receptor) or die "Copy failed: $!";
chdir "$scampidir" or die "Can't enter $scampidir: $!\n";
`SCAMPI_run.pl $$receptor 1`;

#topcons
`TOPCONS.sh $protnamef $main_outdir $spoctopusdir $prodivdir $scampidir`;
}

sub make_pir{
my ($receptor,$receptor_name)=@_;
my ($k1,$k2,$j,$line,@seqline,@aasekw);
my $receptor_pir=$$receptor_name.".ali";
open(SEQ, "<$$receptor") or die "Can’t open output file: $! $$receptor";
open(SEQPIR, ">$$receptor_pir") or die "Can’t open output file: $! $receptor_pir";
#read fasta
my @fasta=<SEQ>;
close (SEQ);
chomp @fasta;
foreach $line (@fasta){
  if !($line=~/^>/){@seqline=split //,$line;}
  push (@aasekw, @seqline);
}
printf SEQPIR ">P1;$$receptor_name";
printf SEQPIR "sequence:$$receptor_name:::::::0.00: 0.00";

my $llin=int $#aasekw/80.0;

for $k(1..$llin+1){# print in lines not longer than 80 characters
	$k1=($k-1)*80+1;
	$k2=$k*80;
	for $j($k1..$k2){
	  if($j <= $#aasekw){
	  printf SEQPIR ("%s",$aasekw[$j]);}
	}
	print SEQPIR "\n";	
}
close (SEQPIR);	
}
